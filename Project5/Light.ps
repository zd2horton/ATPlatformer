Texture2D shader_texture;
SamplerState sample_type;

cbuffer LightBuffer
{
	float4 diffuse_colour;
    float3 light_direction;
    float padding;

}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

float4 LightPixelShader(PixelInputType input_vertex) : SV_TARGET
{
    float4 texture_colour;
    float3 light_dir;
    float light_intens;
    float4 colour;

    texture_colour = shader_texture.Sample(sample_type, input_vertex.tex);

	//light intensity calculated as dot product between normal vector of triangle and 
	//light direction vector

	//invert for calculations, calculate amout of light on pixel
	light_dir = -light_direction;
	light_intens = saturate(dot(input_vertex.normal, light_dir));

	//diffuse value of light combined with texture pixel value to produce colour result
	colour = saturate(diffuse_colour * light_intens);
	//multiply texture pixel and final diffuse colour
	colour = colour * texture_colour;
    return colour;
}
